// // 1) assigning a real to a boolean is illegal
// routine AssignRealToBool() is
//     var b : boolean;
//     b := 1.5            // ERROR: assigning real to boolean is illegal
// end

// // 2) assigning an integer !=0/1 to boolean is erroneous
// routine BoolFromBadInt() is
//     var bb: boolean;
//     bb := 2             // ERROR: integer->boolean conversion only allowed for 0 or 1
// end

// // 3) array size must be compile-time constant (here it uses variable x)
// routine ArraySizeNotConstant() is
//     var x: integer is 3;
//     type A is array [ x ] integer    // ERROR: array size must be compile-time constant
// end

// // 4) sizeless array type is allowed only for parameters, not for variable declarations
// routine SizelessArrayAsVariable() is
//     var arr: array [] integer        // ERROR: sizeless array allowed only for parameters
// end

// // 5) duplicate field name in a record
// routine DuplicateRecordField() is
//     type R is record
//         var a: integer;
//         var a: real                   // ERROR: duplicate field name 'a' in record
//     end
//     var r: R;
// end

// // 6) assignment between different named user-defined types must be identical type name
// routine AssignDifferentUserTypes() is
//     type T1 is record
//         var x: integer;
//     end
//     type T2 is record
//         var x: integer;
//     end
//     var a: T1;
//     var b: T2;
//     a := b                             // ERROR: user-defined types must be the same named type
// end

// // 7) calling a routine with wrong parameter type
// routine foo(x: integer) is
//     return
// end

// routine CallWithWrongParam() is
//     foo(true)                          // ERROR: argument type boolean does not conform to parameter integer
// end

// // 8) wrong number of arguments in call
// routine bar(a: integer, b: integer) is
//     return
// end

// routine CallWithWrongArgCount() is
//     bar(1)                              // ERROR: wrong number of arguments (expected 2)
// end

// // 9) missing return in function that has result type
// routine MissingReturn() : integer is
//     var x: integer is 5;
//     // no 'return' statement provided in function body
// end                                  // ERROR: function declared with result type must use return

// // 10) return expression type mismatch (function declared integer but returns boolean)
// routine ReturnTypeMismatch() : integer is
//     return true                         // ERROR: return expression type boolean does not conform to declared integer
// end

// // 11) assigning to the implicit for-loop variable is prohibited
// routine AssignToLoopVar() is
//     for i in 1 .. 3 loop
//         i := i + 1                      // ERROR: loop variable is read-only (assignment to loop var)
//     end
// end

// 12) use of undeclared identifier
routine UseUndeclaredIdentifier() is
    var a: integer is 1;
    b := a + 2                          // ERROR: 'b' is undeclared
end
