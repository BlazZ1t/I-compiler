// Global type declarations
type Index is integer
type RealArray is array[10] real

// Global variable declarations
var g_counter : integer is 0
var g_flag : boolean is true
var g_values : RealArray

// Routine 1: no parameters, no return
routine HelloWorld() is
    print g_counter
end

// Routine 2: simple integer addition
routine Add(a : integer, b : integer) : integer is
    return a + b
end

// Routine 3: max of two reals
routine MaxReal(x : real, y : real) : real is
    if x > y then
        return x
    else
        return y
    end
end

// TO BE DISCUSSED IF POSSIBLE
// Routine 4: toggle global flag
routine ToggleFlag() is
    g_flag := not g_flag
end

// Routine 5: factorial (recursion)
routine Factorial(n : integer) : integer is
    if n = 0 then
        return 1
    else
        return n * Factorial(n - 1)
    end
end

// Routine 6: print numbers 1..N (for-loop)
routine PrintRange(n : integer) is
    for i in 1 .. n loop
        print i
    end
end

// Routine 7: print while decreasing
routine Countdown(n : integer) is
    var k : integer is n
    while k > 0 loop
        print k
        k := k - 1
    end
end

// Routine 8: fill global array with squares
routine FillSquares() is
    for i in 1 .. 10 loop
        g_values[i] := i * i
    end
end

// Routine 9: sum array
routine SumArray(arr : RealArray) : real is
    var total : real is 0.0
    for i in 1 .. 10 loop
        total := total + arr[i]
    end
    return total
end

// Routine 10: forward declaration
routine ForwardDemo(x : integer) : integer

// Routine 11: forward definition
routine ForwardDemo(x : integer) is
    return Factorial(x) + Add(x, 2)
end

// Routine 12: boolean logic test
routine LogicTest(a : boolean, b : boolean) : boolean is
    return (a and not b) or (b and not a)
end

// Routine 13: record example
type Point is record
    var x : real
    var y : real
end

routine Distance(p1 : Point, p2 : Point) : real is
    var dx : real is p1.x - p2.x
    var dy : real is p1.y - p2.y
    return (dx*dx + dy*dy) / 2.0
end

// Routine 14: nested record/array usage
type Matrix is array[3] Point

routine PrintMatrix(m : Matrix) is
    for i in 1 .. 3 loop
        print m[i].x, m[i].y
    end
end

// Routine 15: conditional example
routine Signum(n : integer) : integer is
    if n > 0 then
        return 1
    else
        if n = 0 then
            return 0
        else
            return -1
        end
    end
end

// Routine 16: demonstrate shadowing
routine ShadowExample() is
    var g_counter : integer is 42
    print g_counter   // prints local, hides global
end

// Routine 17: array iteration with reverse
routine PrintReverse(arr : RealArray) is
    for x in arr reverse loop
        print x
    end
end

// Entry point routine (program start here)
routine Main() is
    HelloWorld()
    ToggleFlag()
    print Add(3,4), MaxReal(2.5,9.1)
    PrintRange(5)
    Countdown(3)
    FillSquares()
    print SumArray(g_values)
    print Factorial(5)
end
